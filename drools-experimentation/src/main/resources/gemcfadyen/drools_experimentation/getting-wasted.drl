package gemcfadyen.drools_experimentation.drunkenantics;
import gemcfadyen.drools_experimentation.drunkenantics.Person.PersonType;
import gemcfadyen.drools_experimentation.drunkenantics.Person;
import gemcfadyen.drools_experimentation.drunkenantics.Puke;

rule "should give a man a drink if he is not over the limit"
when
   man : Person(type == PersonType.MAN, numberOfDrinksConsumed < PersonType.MAN.getMaxUnits())
   not (exists (Puke()))
then
   man.addToTotalNumberOfDrinks();
end

rule "should give a woman another drink if she is not over the limit"
when
   woman : Person(type == PersonType.WOMAN, numberOfDrinksConsumed < PersonType.WOMAN.getMaxUnits())
   not (exists (Puke()))
then 
   woman.addToTotalNumberOfDrinks();
end

rule "should give a geordie another drink if they are not over the limit"
when
   geordie : Person(type == PersonType.GEORDIE, numberOfDrinksConsumed < PersonType.GEORDIE.getMaxUnits())
   not (exists (Puke()))
then 
   geordie.addToTotalNumberOfDrinks();
end

/**
Salience needs to be set on the puking rules, so that they are run ahead of the others. 
This way, it is not possible for a member of a party to get served if one of the members has puked
**/
rule "should insert puke into the session when geordie reaches their alcohol intake limit"
salience 1
when 
    geordie : Person(type == PersonType.GEORDIE, numberOfDrinksConsumed == PersonType.GEORDIE.getMaxUnits())
then
    insert (new Puke(geordie));
end

rule "should insert puke into the session when man reaches his alcohol intake limit"
salience 1
when 
    man : Person(type == PersonType.MAN, numberOfDrinksConsumed == PersonType.MAN.getMaxUnits())
then
    insert (new Puke(man));
end

rule "should insert puke into the session when woman reaches her alcohol intake limit"
salience 1
when 
    woman : Person(type == PersonType.WOMAN, numberOfDrinksConsumed == PersonType.WOMAN.getMaxUnits()) 
then
    insert (new Puke(woman));
end



